<?php

/*

TABLE OF CONTENTS
1. In-Store Payment
2. Feather (Bird) Marketplace
3. Load Transactions
4. Refund/Void Transaction

Created By: Eric Steinecke
Date: 2/19/18
Contact: eric.steinecke@gmail.com

Revision: 7/31/2018 by Eric Steinecke
Notes:
Added functions/fields for PETRA 1.0 (no inventory management system)

*/

require('header.php');
date_default_timezone_set("UTC");

########## 1. BEGIN IN-STORE PAYMENT ##########

//ini_set('display_errors', 1);
//ini_set('display_startup_errors', 1);
//error_reporting(E_ALL);
//print_r($_GET);

if($_POST['transaction'] === 'start') { //Cashier app requests customer to pay

    $cashier_id = $_POST['cashierid'];
    $original_price = $_POST['price'];
    $transaction_type = $_POST['transactiontype'];
    $merchant_id = $_POST['merchantid'];
    $location_id = $_POST['locationid'];
    $datetime = (new Datetime())->format('Y-m-d H:i:s');

    //1. Create transaction in transactions
    $transactionQuery = $conn->prepare("INSERT INTO transactions (original_price,transaction_type,transaction_started) VALUES (:original_price,:transaction_type,NOW())");
    try{
        $transactionQuery->execute(array(
            ':original_price'   => $original_price,
            ':transaction_type' => $transaction_type,
    ));

        $transaction_id = $conn->lastInsertId('transaction_id');

    } catch(PDOException $error) {
        $result['status'] = 0;
        $result['code'] = "TR-01-A";
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };

    //2. Log Transaction Party
    $partyQuery = $conn->prepare("INSERT INTO trans_parties (transaction_id, merchant_id, cashier_id, merchant_location_id) VALUES (:tid, :mid, :cid, :mlid)");
    try{
        $partyQuery->execute(array(
            ':tid'  => $transaction_id,
            ':mid'  => $merchant_id,
            ':cid'  => $cashier_id,
            ':mlid' => $location_id
        ));
    } catch(PDOException $error){
        $result['status'] = 0;
        $result['code'] = "TR-01-B";
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };


    //3. Get Latest Token Price
    $locationQuery = $conn->prepare("SELECT token_price FROM merchant_locations WHERE location_id = :location_id");
    try{
        $locationQuery->execute(array(
            ':location_id'  => $location_id
        ));

        $result['tokenprice'] = $locationQuery->fetch(PDO::FETCH_ASSOC)['token_price'];
        $result['code'] = "TR-01-S";

    } catch(PDOException $error){ //nonfatal
        $result['code'] = "TR-01-B";
        $result['error'] = $error->getMessage();
    };

    $result['data'] = $transaction_id;
    $result['status'] = 1;

    echo json_encode($result);
};

if($_POST['transaction'] === 'retrieve') { //Reference Code for Mobile payments only. Can be for customers/customer merchants.

    $transaction_id = $_POST['transaction_id'];
    if ($_POST['customerid']) {
        $customer_id = $_POST['customerid'];
        $table = 'customers';
        $table_id_column = "customer_id";
        $wallet = 'customer_wallet';
        $wallet_id_column = 'customer_id';
        $name = 'name';
    } elseif ($_POST['customermerchantid']) {
        $customer_id = $_POST['customermerchantid'];
        $table = 'merchants';
        $table_id_column = 'merchant_id';
        $wallet = 'merchant_wallet';
        $wallet_id_column = 'customer_merchant_id';
        $name = 'dba';
    };

    $customerArray = [];

    //1. Get Initial Transaction Data
    //$fiveminutesago = date("Y-m-d H:i:s", strtotime("-5 minutes"));
    $transactionQuery = $conn->prepare("SELECT t.transaction_id, p.merchant_id, t.original_price, t.transaction_type FROM transactions t LEFT JOIN trans_parties p ON t.transaction_id = p.transaction_id WHERE t.transaction_id= :transaction_id"); // AND transaction_started > '$fiveminutesago'
    try{
        $transactionQuery->execute(array(
            ':transaction_id'   => $transaction_id
        ));

        $transactionArray = $transactionQuery->fetch(PDO::FETCH_ASSOC);

    } catch(PDOException $error){
        $result['status'] = 0;
        $result['code'] = "TR-02-A";
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };

    //2. Get Merchant DBA
    $merchantQuery = $conn->prepare("SELECT dba FROM merchants  WHERE merchant_id = :merchant_id");
    try{
        $merchantQuery->execute(array(
            ':merchant_id' => $transactionArray['merchant_id']
        ));

        $merchantArray = $merchantQuery->fetch(PDO::FETCH_ASSOC);
    } catch(PDOException $error){
        $result['status'] = 0;
        $result['code'] = 'TR-02-B';
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };

    //3. Get Customer Wallet Data
    $customerQuery = $conn->prepare("SELECT feathers FROM $wallet WHERE $wallet_id_column = :customer_id AND merchant_id = :merchant_id");
    try{
        $customerQuery->execute(array(
            ':customer_id'      => $customer_id,
            ':merchant_id'      => $transactionArray['merchant_id']
        ));

        $customerArray['feathers'] = $customerQuery->fetch(PDO::FETCH_ASSOC)['feathers'];

    } catch(PDOException $error){
        $result['status'] = 0;
        $result['code'] = "TR-02-C";
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };

    //4. Get Customer Metadata
    $customerQuery2 = $conn->prepare("SELECT $name AS name FROM $table WHERE $table_id_column = :customer_id");
    try{
        $customerQuery2->execute(array(
            ':customer_id'      => $customer_id
        ));

        $customerArray['name'] = $customerQuery2->fetch(PDO::FETCH_ASSOC)['name'];

    } catch (PDOException $error){
        $result['errors'][]['code'] = "TR-02-C";
        $result['errors'][]['error'] = $error->getMessage();
    };

    $result['status'] = 1;
    $result['code'] = 'TR-02-S';
    $result['data']['customer'] = $customerArray;
    $result['data']['merchant'] = array_merge($merchantArray, $transactionArray);

    echo json_encode($result);
};

if(in_array($_POST['transaction'], array('customerpay','cashlessexchange'))){ // Customer pays

    /* ---------------------------------
        1. Initial Variables
    --------------------------------- */

    if (!empty($_POST['customermerchantid'])){ //If customer is a merchant
        $id_column = 'customer_merchant_id';
        $id_column_points = 'merchant_id';
        $customer_id = $_POST['customermerchantid'];
        $table = 'merchants';
        $wallet = 'merchant_wallet';
    } else { //If customer is an individual
        $id_column = 'customer_id';
        $id_column_points = 'customer_id';
        $customer_id = $_POST['customerid'];
        $table = 'customers';
        $wallet = 'customer_wallet';
    };

    $pay_method = $_POST['paymethod'];
    $transaction_id = $_POST['transaction_id'];

    //Suggestive Selling
    $buy_tokens = $_POST['buytokens'];
    $buy_tokens_rate = $_POST['buytokensrate'];
    $buy_tokens_price = $_POST['buytokensprice'];

    //Value Proposition
    $vp_accepted = $_POST['vpaccepted'];

    $vp_fee = ($vp_accepted == 1) ? $_POST['vpfee'] : 0;
    $vp_rate = ($vp_accepted == 1) ? $_POST['vprate'] : 0;
    $vp_tokens = ($vp_accepted == 1) ? $_POST['vptokens'] : 0;

    //Charity Donation
    $charity_price = $_POST['charityprice'];
    $charity_accepted = ($charity_price != 0) ? 1 : 0;

    $customer_wallet_total = $_POST['tokensinwallet'];
    $tokens_used = $_POST['tokensused'];

    $init_points = $_POST['pointstotal'];
    $original_price = $_POST['originalprice'];
    $subtotal = $_POST['subtotal']; //Original Price + Bought Tokens
    $total_price = $_POST['totalprice']; // Original Price + Bought Tokens + Value Proposition - Tokens Used. The final pay amount.

    $signature = str_replace(" ","+",$_POST['signature']);
    $merchant_id =  $_POST['merchantid'];

    //PayAnywhere
    $pa_transaction_id = $_POST['patransactionid'];
    $pa_receipt_id = $_POST['pareceiptid'];
    $pa_payment_success = $_POST['papaymentsuccess'];

    /* ---------------------------------
        2a. Cancel Transaction
    --------------------------------- */

    if($pay_method === 'Canceled') {

        //$cancelTransactionQuery = $conn->prepare("UPDATE transactions SET pay_method='Canceled', $id_column = :customer_id WHERE transaction_id = :transaction_id");
        $cancelQuery = $conn->prepare("DELETE FROM transactions WHERE transaction_id = :tid");

        try{
            $cancelQuery->execute(array(
                ':tid'  => $transaction_id
            ));

        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-03-A";
            $result['message'] = "Unable to cancel transaction.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        $cancelQuery = $conn->prepare("DELETE from trans_parties WHERE transaction_id = :tid");
        try{
            $cancelQuery->execute(array(
                ':tid'  => $transaction_id
            ));
        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-03-B";
            $result['message'] = "Unable to cancel transaction.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        $result['status'] = 1;
        $result['message'] = "Transaction canceled.";
        echo json_encode($result);
    };

    /* ---------------------------------
        2b. Continue Transaction
    --------------------------------- */

    if($pay_method !== 'Canceled'){

        //1. Get what merchant owes us
        $tokensQuery = $conn->prepare("SELECT * FROM the_nest WHERE merchant_id = :merchant_id AND owner_merchant_id = 54");
        try{
            $tokensQuery->execute(array(
                ':merchant_id'  => $merchant_id
            ));

            $tokensArray = $tokensQuery->fetch(PDO::FETCH_ASSOC);

            $arcade_id = $tokensArray['nest_id'];
            $current_arcade_total = ($tokensArray['feathers']) ?? 0;

        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-04-B";
            $result['message'] = "Unable to get Arcade details about the merchant.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        //2. Get merchant wallet balance
        $tokensMerchantQuery = $conn->prepare("SELECT feathers FROM merchant_wallet WHERE merchant_id = :merchant_id AND customer_merchant_id = :merchant_id");
        try{
            $tokensMerchantQuery->execute(array(
                ':merchant_id'  => $merchant_id
            ));

            $merchant_wallet_total = ($tokensMerchantQuery->fetch(PDO::FETCH_ASSOC)['feathers']) ?? 0;

        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-04-C";
            $result['message'] = "Unable to retrieve tokens from the merchant wallet.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        //3. Calculations
        $our_fee = (($pay_amount*0.035) > 50) ? 50 : $pay_amount*0.035; //Maximum 50 token fee.
        $tokens_merchant_diff = $current_arcade_total + $our_fee; //Increase feathers in nest by 3.5% in the cash transaction.
        $new_merchant_wallet_total = $merchant_wallet_total + $tokens_used; //Add redeemed tokens in merchant wallet for trade.
        $new_customer_wallet_total = $customer_wallet_total - $tokens_used + $buy_tokens + $vp_tokens;

        switch($pay_method){
            case 'ArcadePay':
            case 'Card':
                $points_generated = ($original_price - $tokens_used - $vp_tokens)*100;
                break;
            case 'Cash':
                $points_generated = ($original_price - $tokens_used - $vp_tokens)*200;
                break;
            case 'Exchange':
                $points_generated = 0;
                break;
        };

        $new_points = $init_points + $points_generated; //points to put in customers

        /* ---------------------------------
            3. Update Wallets & Nest
        --------------------------------- */

        if(!empty($customer_id)){

            // Update Customer Wallet
            if($customer_wallet_total == 0){ // If no entry in wallet, create entry, else update/delete entry.
                $update_customer_wallet_query = $conn->prepare("INSERT INTO $wallet ($id_column,merchant_id,feathers) VALUES (:customer_id, :merchant_id, $new_customer_wallet_total)");
            } else {
                if($new_customer_wallet_total <= 0){ // Less than 0 only possible if Exchange transaction.
                    $update_customer_wallet_query = $conn->prepare("DELETE FROM $wallet WHERE $id_column = :customer_id AND merchant_id = :merchant_id");
                } else {
                    $update_customer_wallet_query = $conn->prepare("UPDATE $wallet SET feathers = $new_customer_wallet_total WHERE merchant_id = :merchant_id AND $id_column = :customer_id");
                };
            };

            try{
                $update_customer_wallet_query->execute(array(
                    ':customer_id'  => $customer_id,
                    ':merchant_id'  => $merchant_id,
                ));
            } catch(PDOException $error){
                $result['status'] = 0;
                $result['code'] = "TR-04-D";
                $result['message'] = "Unable to update the customer wallet.";
                $result['error'] = $error->getMessage();

                echo json_encode($result);
                die();
            };

            //Update Customer Points
            $update_points_query = $conn->prepare("UPDATE $table SET points = $new_points WHERE $id_column_points = :customer_id");

            try{
                $update_points_query->execute(array(
                    ':customer_id'      => $customer_id
                ));
            } catch (PDOException $error){
                $result['status'] = 0;
                $result['code'] = "TR-04-E";
                $result['message'] = "Unable to update customer points.";
                $result['error'] = $error->getMessage();

                echo json_encode($result);
                die();
            };
        };

        // Take our cut. If merchant has no nest entry, create it. Otherwise, update it.
        if(empty($arcade_id)){
            $our_cut_query = $conn->prepare("INSERT INTO the_nest (merchant_id, owner_merchant_id, feathers, price) VALUES (:merchant_id, 54, $new_merchant_wallet_total, 0.50)");

            $params = array(
                ':merchant_id'  => $merchant_id
            );
        } else {
            $our_cut_query = $conn->prepare("UPDATE the_nest SET feathers = $new_merchant_wallet_total WHERE nest_id = :arcade_id");

            $params = array(
                ':arcade_id'   => $arcade_id
            );
        };

        try{
            $our_cut_query->execute($params);

        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-04-F";
            $result['message'] = "Unable to add the new Arcade totals.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        //Update Merchant Wallet (if tokens were used...)
        if(!empty($tokens_used)){
            if($pay_method === 'ArcadePay'){
                $new_merchant_wallet_total += ceil($total_price);
            };

            if($merchant_wallet_total > 0) {
                $update_merchant_wallet = $conn->prepare("UPDATE merchant_wallet SET feathers = $new_merchant_wallet_total WHERE merchant_id = :customer_id AND customer_merchant_id = :merchant_id");
            } else {
                $update_merchant_wallet = $conn->prepare("INSERT INTO merchant_wallet (feathers,merchant_id,customer_merchant_id) VALUES ($new_merchant_wallet_total, :customer_id, :merchant_id)");
            };

            if(!(empty($_POST['customermerchantid']))){ //If a merchant is paying...
                $params = array(
                    ':merchant_id'  => $merchant_id,
                    ':customer_id'  => $customer_id
                );
            } else {
                $params = array( //If a customer is paying...
                    ':merchant_id'  => $merchant_id,
                    ':customer_id'  => $merchant_id
                );
            };

            try{
                $update_merchant_wallet->execute($params);

            } catch(PDOException $error){
                $result['status'] = 0;
                $result['code'] = "TR-04-G";
                $result['message'] = "Unable to update the merchant's wallet.";
                $result['error'] = $error->getMessage();

                echo json_encode($result);
                die();
            };
        };

        /* ---------------------------------
            4. Update transactions tables
        --------------------------------- */

        //Get transaction_started

        $startedQuery = $conn->prepare("SELECT transaction_started FROM transactions WHERE transaction_id = :tid");
        try{
            $startedQuery->execute(array(
                ':tid'  => $transaction_id
            ));

            $transaction_started = $startedQuery->fetch(PDO::FETCH_ASSOC)['transaction_started'];
        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-04-H";
            $result['message'] = "Unable to get when transaction started.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        //Update trans_parties
        $updateParties = $conn->prepare("UPDATE trans_parties SET $id_column = :cid WHERE transaction_id = :tid");
        try{
            $updateParties->execute(array(
                ':cid'  => $customer_id,
                ':tid'  => $transaction_id
            ));
        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-04-I";
            $result['message'] = "Unable to update transaction parties.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };
        $tip = $_POST['tip'];
        //Update trans_payanywhere table
        $params = array(
            ':transaction_id'   => $transaction_id,
            ':tokens_used'      => $tokens_used,
            ':vp_accepted'      => $vp_accepted,
            ':vp_rate'          => $vp_rate,
            ':vp_fee'           => $vp_fee,
            ':vp_tokens'        => $vp_tokens,
            ':tokens_bought'    => $buy_tokens,
            ':token_rate'       => $buy_tokens_rate,
            ':token_price'      => $buy_tokens_price,
            ':charity_price'    => $charity_price,
            ':tip'              => $tip,
            ':original_price'   => $original_price,
            ':subtotal'         => $subtotal,
            ':total_price'      => $total_price,
            ':pay_method'       => $pay_method,
            ':started'          => $transaction_started,
            ':signature'        => $signature,
            ':patid'            => $pa_transaction_id,
            ':receiptid'        => $pa_receipt_id,
            ':paps'             => $pa_payment_success

        );

        $updateTransaction = $conn->prepare("INSERT INTO trans_payanywhere (transaction_id, tokens_used, vp_accepted, vp_rate, vp_fee, vp_tokens, tokens_bought, token_rate, token_price, charity_accepted, charity_price, tip, original_price, subtotal, total_price, points_gained, pay_method, transaction_started, transaction_complete, signature, pa_transaction_id, pa_receipt_id, pa_payment_success) VALUES(:transaction_id, :tokens_used, :vp_accepted, :vp_rate, :vp_fee, :vp_tokens, :tokens_bought, :token_rate, :token_price, $charity_accepted, :charity_price, :tip, :original_price, :subtotal, :total_price, $points_generated, :pay_method, :started, NOW(), :signature, :patid, :receiptid, :paps)");

        try{
            $updateTransaction->execute($params);

            $result['status'] = 1;
            $result['code'] = "TR-04-S";
            $result['message'] = "Transaction complete. Thank you for shopping with us!";

        } catch(PDOException $error){
            $result['status'] = 0;
            $result['code'] = "TR-04-J";
            $result['message'] = "Unable to record transaction details.";
            $result['error'] = $error->getMessage();

            echo json_encode($result);
            die();
        };

        echo json_encode($result);
    };
};

if($_POST['action'] === "loadtransaction"){ //For loading transaction details in Admin panel in Petra
    $transaction_id = $_POST['transaction_id'];

    $transactionQuery = $conn->prepare("SELECT t.transaction_id, p.customer_id, p.customer_merchant_id, t.tokens_used, t.vp_accepted, t.vp_rate, t.vp_fee, t.vp_tokens, t.tokens_bought, t.token_price, t.token_rate, t.charity_accepted, t.charity_price, t.tip, t.original_price, t.subtotal, t.total_price, t.pay_method, t.transaction_complete, t.pa_transaction_id, t.pa_receipt_id, c.name AS cashier_name, cu.name AS customer_name, m.dba AS dba FROM trans_payanywhere t LEFT JOIN trans_parties p ON t.transaction_id = p.transaction_id LEFT JOIN cashiers c ON c.cashier_id = p.cashier_id LEFT JOIN customers cu ON p.customer_id = cu.customer_id LEFT JOIN merchants m ON p.customer_merchant_id = m.merchant_id WHERE t.transaction_id = :tid");

    try{
        $transactionQuery->execute(array(
            ':tid'   => $transaction_id
        ));

        $result['data']['transaction'] = $transactionQuery->fetch(PDO::FETCH_ASSOC);
        $result['status'] = 1;
        $result['code'] = "TR-05-S";
        $result['message'] = "Loaded transaction details.";

    } catch(PDOException $error){
        $result['status'] = 0;
        $result['code'] = "TR-05-A";
        $result['message'] = "Unable to get transaction details.";
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };

    echo json_encode($result);
};

########## END FEATHER MARKETPLACE ##########
########## 3. LOAD TRANSACTIONS ##########

if($_POST['load'] === 'transactions') {

    foreach($_POST as $key=>$value) {
        switch($key) {
            case 'customerid':
                $transactionsQuery = "SELECT t.transaction_id, p.merchant_id, p.cashier_id, p.customer_id, p.customer_merchant_id, p.token_merchant_id, t.original_price, t.points_gained, t.tokens_used, t.total_price, t.pay_method, t.transaction_complete, m.dba AS merchant_name, c.name AS customer_name, c.email, m2.dba AS token_merchant_name, l.address AS feathers_merchant_address, l.city AS feathers_merchant_city, l.state as feathers_merchant_state, l.zipcode as feathers_merchant_zipcode FROM trans_payanywhere t
                LEFT JOIN trans_parties p ON p.transaction_id = t.transaction_id
                LEFT JOIN merchants m ON t.merchant_id = m.merchant_id
                LEFT JOIN merchants m1 ON t.transfer_merchant_id = m1.merchant_id
                LEFT JOIN merchants m2 ON t.token_merchant_id = m2.merchant_id
                LEFT JOIN merchant_locations l ON t.token_merchant_location_id = l.location_id
                LEFT JOIN customers c ON t.transfer_customer_id = c.customer_id
                WHERE t.customer_id = :customer_id AND ";

                $params = array(
                    ':customer_id'  => $_POST['customerid']
                );
                break;
            case 'cashierid':
                $yesterday = date("Y-m-d H:i:s", strtotime("-1 day"));
                $transactionsQuery = "SELECT * FROM trans_payanywhere t LEFT JOIN trans_parties p ON t.transaction_id = p.transaction_id WHERE p.cashier_id = :cashier_id AND t.transaction_complete > '$yesterday'";

                $params = array(
                    ':cashier_id'   => $_POST['cashierid']
                );
                break;
            case 'customermerchantid':
                $thirtydaysago = date('Y-m-d H:i:s', strtotime("-30 days"));
                $transactionsQuery = "
                SELECT t.transaction_id, p.merchant_id, p.cashier_id, p.customer_id, p.customer_merchant_id, p.token_merchant_id, t.original_price, t.points_gained, t.tokens_used, t.total_price, t.pay_method, t.transaction_type, t.transaction_complete, t.pa_transaction_id, t.pa_receipt_id, m.dba AS merchant_name FROM trans_payanywhere t
                LEFT JOIN trans_parties p ON p.transaction_id = t.transaction_id
                LEFT JOIN merchants m ON p.merchant_id = m.merchant_id
                WHERE p.customer_merchant_id= :customer_merchant_id AND t.transaction_complete >= $thirtydaysago";

                $params = array(
                    ':customer_merchant_id' => $_POST['customermerchantid']
                );
                break;
            case 'merchantid':
                //1st for normal transactions, 2nd for positive transfers
                $transactionsQuery = "
                SELECT * FROM trans_payanywhere t
                LEFT JOIN trans_parties p ON p.transaction_id = t.transaction_id
                LEFT JOIN customers c ON p.customer_id = c.customer_id
                WHERE p.merchant_id = :merchant_id
                UNION
                SELECT * FROM tranfers t
                LEFT JOIN customers c ON t.customer_id = c.customer_id
                WHERE t.transfer_merchant_id = :merchant_id";

                $params = array(
                    ':merchant_id'  => $_POST['merchantid']
                );
                break;
            case 'locationid':
                $transactionsQuery = "
                SELECT * FROM trans_payanywhere t
                LEFT JOIN trans_parties p ON t.transaction_id = p.transaction_id
                LEFT JOIN customers c ON p.customer_id = c.customer_id
                WHERE p.merchant_location_id = :location_id";

                $params = array(
                    ':location_id'  => $_POST['locationid']
                );
                break;
        };

        $transactionsQuery .= " ORDER BY t.transaction_id DESC";
    };

    $transactionsQuery = $conn->prepare($transactionsQuery);

    try{
        $transactionsQuery->execute($params);
        $transactionsData = $transactionsQuery->fetchAll(PDO::FETCH_ASSOC);

    } catch(PDOException $error){
        $result['status'] = 0;
        $result['code'] = "TR-06-A";
        $result['error'] = $error->getMessage();

        echo json_encode($result);
        die();
    };

    $customerIds = [];
    $transferCustomerIds = [];
    $cashierIds = [];

    foreach($transactionsData as $key=>$row){

        if(!empty($row['transfer_customer_id'])){
            $transferCustomerIds[] = $row['transfer_customer_id'];
        };
        if(!empty($row['customer_id'])){
            $customerIds[] = $row['customer_id'];
        };
        if(!empty($row['cashier_id'])){
            $cashierIds[] = $row['cashier_id'];
        };

        $cashierQuery = $conn->prepare("SELECT name FROM cashiers WHERE cashier_id = :cashier_id");

        try{
            $cashierQuery->execute(array(
                ':cashier_id'   => $row['cashier_id']
            ));

            $transactionsData[$key]['cashier_name'] = $cashierQuery->fetch(PDO::FETCH_ASSOC)['name'];

        } catch(PDOException $error){
            $result['errors'][]['code'] = "TR-06-B";
            $result['errors'][]['error'] = $error->getMessage();
        };

        if($row['customer_merchant_id'] > 0){
            $merchantQuery = $conn->prepare("SELECT dba FROM merchants WHERE merchant_id = :merchant_id");

            try{
                $merchantQuery->execute(array(
                    ':merchant_id'  => $row['customer_merchant_id']
                ));

                $transactionsData[$key]['name'] = $merchantQuery->fetch(PDO::FETCH_ASSOC)['dba']; //Replace empty customer 'name' property

            } catch(PDOException $error){
                $result['errors'][]['code'] = "TR-06-C";
                $result['errors'][]['error'] = $error->getMessage();
            };
        };
    };

    if(count($transferCustomerIds) > 0){
        $transferCustomerIdsString = implode(',', array_values(array_unique($transferCustomerIds)));
        $transferQuery = $conn->prepare("SELECT name, phone, customer_id FROM customers WHERE customer_id IN($transferCustomerIdsString)");

        try{
            $transferQuery->execute();
            $result['data']['customers']['transfers'] = $transferQuery->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $error){
            $result['errors'][]['code'] = "TR-06-D";
            $result['errors'][]['error'] = $error->getMessage();
        };
    };

    if(count($cashierIds) > 0){
        $cashierIdsString = implode(',',array_values(array_unique($cashierIds)));
        $cashiersQuery = $conn->prepare("SELECT name, phone, cashier_id FROM cashiers WHERE cashier_id IN($cashierIdsString)");

        try{
            $cashiersQuery->execute();
            $result['data']['cashiers'] = $cashierQuery->fetchAll(PDO::FETCH_ASSOC);

        } catch(PDOException $error){

            $result['errors'][]['code'] = "TR-06-E";
            $result['errors'][]['error'] = $error->getMessage();
        };
    };

//    for($i=0; $i<count($result['data']['transactions']); $i++) {
//        $merchantIds[] = $result['data']['transactions'][$i]['merchant_id'];
//    };
//
//    if (count($merchantIds) > 0) {
//        $merchantIds = implode(',',array_values(array_unique($merchantIds)));
//        $merchantQuery = "SELECT merchant_id, dba, address, city, state, logo FROM merchants WHERE merchant_id IN($merchantIds)";
//
//        if ($merchantResult = $conn->query($merchantQuery)) {
//            while($row = $merchantResult->fetch_assoc()) {
//                $result['data']['merchants'][] = $row;
//            };
//            $result['status'] = 1;
//            $result['message'] = "Loaded transaction data.";
//        } else {
//            $result['status'] = 0;
//            $result['message'] = "Unable to get merchant data.";
//        };
//    } else {
//        $result['status'] = 1;
//        $result['message'] = ($_POST['cashierid']) ? "No transactions today." : "No transactions. Go buy stuff!";
//    };

    $result['data']['transactions'] = $transactionsData;

    if(count(transactionsData) > 0){
        $result['status'] = 1;
        $result['code'] = "TR-06-SA";
    } else {
        $result['status'] = 1;
        $result['code'] = "TR-06-SB";
    };

    echo json_encode($result);
};


//Search for a transaction
if($_POST && $_POST['action'] == "searchtransactions"){

    $columns = array(
        'pa_transaction_id' => $_POST['transaction_id'],
        'pa_receipt_id'     => $_POST['receiptid']
    );

    $searchString = "";
    $params = array();
    $i=1;

    foreach($columns as $key=>$value){
        if(isset($value)){
            $searchString .= "$key LIKE :$key"; //Only a single value
            if($i < count($columns)){
                $searchString .= " AND ";
            };
            $params[":$key"] = $value;
            $i++;
        };
    };

    $searchQuery = $conn->prepare("SELECT * FROM trans_payanywhere WHERE $searchString");

    try{
        $searchQuery->execute($params);
        $searchResults = $searchQuery->fetchAll(PDO::FETCH_ASSOC);

        $total_price = $searchResults['total_price'] ?? 0;
        $token_price = $searchResults['token_price'] ?? 0;

        $searchResults['refund_amount'] = $total_price - $token_price;

        $result['data'] = $searchResults;
        $result['status'] = 1;
        $result['code'] = "TR-07-S";

    } catch(PDOException $error){
        $result['status'] = 0;
        $result['message'] = "Unable to run transaction search.";
        $result['code'] = "TR-07-A";
        $result['error'] = $error->getMessage();
    };

    echo json_encode($result);
};

//Update transaction if voided.

// if($_POST && in_array($_POST['action'], array("void"))){

//     $transaction_id = $_POST['transaction_id'];
//     //$updateQuery = $conn->prepare("UPDATE trans_payanywhere SET pay_method = :action WHERE pa_receipt_id = :receiptid");
//     $updateQuery = $conn->prepare("UPDATE trans_payanywhere SET transaction_status = :transaction_status WHERE transaction_id = :transaction_id");

//     try{
//         $updateQuery->execute(array(
//             'transaction_status' => 2,
//             //':action'       => ucfirst($_POST['action']),
//             ':transaction_id'    => $transaction_id
//         ));

//         $result['status'] = 1;
//         $result['code'] = "TR-08-S";
//         $result['message'] = ucfirst($_POST['action'])."ed transaction.";

//     } catch(PDOException $error){
//         $resut['status'] = 0;
//         $result['message'] = "Unable to ".$_POST['action']." transaction.";
//         $result['code'] = "TR-08-A";
//         $result['error'] = $error->getMessage();
//     };

//     echo json_encode($result);
// };

########## 4. Refund/Void Transaction ##########
if($_POST && in_array($_POST['action'], array("refund","void"))){

    $transaction_id = $_POST['transaction_id'];
    $customerid = $_POST['customer_id'];
    $merchantid = $_POST['merchant_id'];
    //$transaction_id = $_POST['transaction_id'];
    //$refundQuery = $conn->prepare("INSERT INTO transactions SET transaction_status = :transaction_status WHERE transaction_id = :transaction_id");
    $customerQuery = $conn->prepare("SELECT feathers FROM customer_wallet WHERE customer_id = :customerid AND merchant_id = :merchantid");
    print_r($_POST);
    try{
        $customerQuery->execute(array(
            ':customerid' => $customerid,
            ':merchantid'    => $merchantid
        ));
        //print_r($tem); exit;
        // $result['status'] = 1;
        // $result['code'] = "TR-08-S";
        // $result['message'] = "Customer token fetched.";
        $customerArray['feathers'] = $customerQuery->fetch(PDO::FETCH_ASSOC)['feathers'];
        print_r($customerArray); exit();

    } catch(PDOException $error){
        $resut['status'] = 0;
        $result['message'] = "Unable to ".$_POST['action']." transaction.";
        $result['code'] = "TR-08-A";
        $result['error'] = $error->getMessage();
    };

    $refundQuery = $conn->prepare("INSERT INTO refund_transaction (refund_total_amount,refund_token_used,refund_token_price,refund_token_rate,refund_tokens_bought,refund_vp_fee,refund_vp_rate,refund_vp_token,refund_charity,refund_tip,refund_pay_method,refund_patransaction_id,refund_patransaction_status) VALUES (:refund_total_amount,:refund_token_used,:refund_token_price,:refund_token_rate,:refund_tokens_bought,:refund_vp_fee,:refund_vp_rate,:refund_vp_token,:refund_charity,:refund_tip,:refund_pay_method,:refund_patransaction_id,:refund_patransaction_status)");
    $updateQuery = $conn->prepare("UPDATE trans_payanywhere SET transaction_status = :transaction_status WHERE transaction_id = :transaction_id");



    $refund_total_amount = floatval($_POST['refund_total_amount']);//Add in Customer Substract from Marchent
    $refund_token_used = intval($_POST['refund_token_used']); //Add in Customer Substract from Marchant Wallet
    $refund_token_price = floatval($_POST['refund_token_price']);
    $refund_token_rate = floatval($_POST['refund_token_rate']); //Simple
    $refund_tokens_bought = intval($_POST['refund_tokens_bought']); //Substract from Customer Add in Marchent Wallet
    $refund_vp_fee = floatval($_POST['refund_vp_fee']); //Add in Customer Substract from Marchant Wallet
    $refund_vp_rate = floatval($_POST['refund_vp_rate']); //Simple
    $refund_vp_token = floatval($_POST['refund_vp_token']); //Add in Customer Substract from Marchant Wallet
    $refund_charity = floatval($_POST['refund_charity']); //Add in Customer Substract from Marchant Wallet
    $refund_pay_method = $_POST['refund_pay_method']; //Simple
    $refund_patransaction_id = $_POST['refund_patransaction_id']; //Simple
    $refund_patransaction_status = $_POST['refund_patransaction_status']; //Simple
    $refund_tip = $_POST['refund_tip']; //Simple
    $transaction_status = ($_POST['action'] == 'refund') ? '3' : '1';
    $customer_id = $_POST['customerid'];
    //print_r($updateQuery); exit();
    try{
        $refundQuery->execute(array(
            ':refund_total_amount'          => $refund_total_amount,
            ':refund_token_used'            => $refund_token_used,
            ':refund_token_price'           => $refund_token_price,
            ':refund_token_rate'            => $refund_token_rate,
            ':refund_tokens_bought'         => $refund_tokens_bought,
            ':refund_vp_fee'                => $refund_vp_fee,
            ':refund_vp_rate'               => $refund_vp_rate,
            ':refund_vp_token'              => $refund_vp_token,
            ':refund_charity'               => $refund_charity,
            ':refund_tip'                   => $refund_tip,
            ':refund_pay_method'            => $refund_pay_method,
            ':refund_patransaction_id'      => $refund_patransaction_id,
            ':refund_patransaction_status'  => $refund_patransaction_status
        ));
        $updateQuery->execute(array(
            'transaction_status' => $transaction_status,
            ':transaction_id'    => $transaction_id
        ));
        //print_r($tem); exit;
        $result['status'] = 1;
        $result['code'] = "TR-08-S";
        $result['message'] = ucfirst($_POST['action'])."ed transaction.";

    } catch(PDOException $error){
        $resut['status'] = 0;
        $result['message'] = "Unable to ".$_POST['action']." transaction.";
        $result['code'] = "TR-08-A";
        $result['error'] = $error->getMessage();
    };
    //print_r($result); exit;
    echo json_encode($result);
};
########## END LOAD TRANSACTIONS ##########


$conn = null;

/*if ($_POST['transaction'] === 'paycheck') {//Cashier app checks if paid (button click)
    $transaction_id = $_POST['transactionid'];
    $checkPaidQuery = "SELECT * FROM transactions WHERE transaction_id = $transaction_id";

    if($checkPaidResult = $conn->query($checkPaidQuery)) {
        $transactionData = $checkPaidResult->fetch_assoc();
        // if($transactionData['pay_method'] !== 'Initiated' && $transactionData['pay_method'] !== 'Canceled' ) {
            if(!in_array($transaction_data['pay_method'], array('Initiated','Canceled'))) {

            $result['status'] = 1;
            $result['message'] = 'Transaction Received';
            $result['data'] = $transactionData;
        }
        else {
            $result['status'] = 0;
            $result['message'] = 'Transaction not complete';
            // In Live cashier app it is checking for lowercase 'initiated' or 'canceled' to give the check alert. qrcode.ts checkstatus function.
            $result['data']['pay_method'] = strtolower($transactionData['pay_method']);
        }
    };

    echo json_encode($result);
};*/

/*if($_POST['transaction'] === 'reward'){//If pay_method = ArcadePay

    $transaction_id = $_POST['transactionid'];
    $reward = $_POST['rewardfeathers'];

    $transactionQuery = "SELECT * FROM transactions WHERE transaction_id = $transaction_id";

    if($transactionResult = $conn->query($transactionQuery)){
        $transactionRow = $transactionResult->fetch_assoc();
    } else {
        $result['status'] = 0;
        $result['message'] = "Unable to gather transaction data.";

        echo json_encode($result);
        die();
    };

    if($transactionRow['customer_id'] == 0){
        $wallet = 'merchant_wallet';
        $idtype = 'customer_merchant_id';
        $customerid = $transactionRow['customer_merchant_id'];
    } else {
        $wallet = 'customer_wallet';
        $idtype = 'customer_id';
        $customerid = $transactionRow['customer_id'];
    };

    $merchantid = $transactionRow['merchant_id'];
    $selectWallet = "SELECT * FROM $wallet WHERE $idtype = $customerid AND merchant_id = $merchantid";

    if($walletResult = $conn->query($selectWallet)){ //Check if wallet exists, else add entry to wallet.
        $walletRow = $walletResult->fetch_assoc();
    } else {
        $result['status'] = 0;
        $result['message'] = "Unable to check wallet.";

        echo json_encode($result);
        die();
    };

    if(!empty($walletRow['feathers'])){
        $newwalletfeathers = $walletRow['feathers'] + $reward;
        $updateWallet = "UPDATE $wallet SET feathers = $newwalletfeathers WHERE wallet_id = ".$walletRow['wallet_id'].";";
    } else {
        $updateWallet = "INSERT INTO $wallet ($idtype, merchant_id, feathers) VALUES ($customerid, $merchantid, $reward);";
    };

    $updateWallet .= "UPDATE transactions SET feather_reward = $reward WHERE transaction_id = $transaction_id";

    if($conn->multi_query($updateWallet)){
        $result['status'] = 1;
        $result['message'] = "Inserted reward.";
    } else {
        $result['status'] = 0;
        $result['message'] = "Unable to insert reward.";
        $result['query'] = $updateWallet;
    };

    echo json_encode($result);

};*/

########## END IN-STORE PAYMENT ##########
########## 2. BEGIN FEATHER MARKETPLACE ##########

/*if($_POST['transaction'] === 'paypal') {//After we're paid via paypal
    if ($_POST['customermerchantid']) {
        $ownermerchantid = $_POST['owner_merchant_id']; //ID Receiving nest transaction
        $customerid = $_POST['customermerchantid'];
        $table = 'merchants';
        $idtype = 'merchant_id';
        $owner_idtype = 'merchant_id'; //Receiving nest transaction
        $customer_idtype = 'customer_merchant_id'; //Starts transaction
        $wallet = 'merchant_wallet';
    } else {
        $ownercustomerid = $_POST['owner_customer_id']; //ID Receiving nest transaction
        $customerid = $_POST['customerid'];
        $table = 'customers';
        $idtype = 'customer_id';
        $owner_idtype = 'owner_customer_id'; //Receiving nest transaction
        $customer_idtype = 'customer_id'; //Starts transaction
        $wallet = 'customer_wallet';
    };
    $nestid = $_POST['nestid'];
    $merchantid = ($_POST['merchantid']) ? $_POST['merchantid'] : '';
    $points = ($_POST['points']) ? $_POST['points'] : '';
    $price = ($_POST['price']) ? $_POST['price'] : '';
    $paypalid = ($_POST['paypalid']) ? $_POST['paypalid'] : '';
    $timestamp = ($_POST['timestamp']) ? $_POST['timestamp'] : '';
    $feathers = ($_POST['feathers']) ? $_POST['feathers'] : '';

    //1. Get current points balance of customer
    //2. Get current feather balance in nest
    //3. Get current feathers from wallet.

    $balanceQuery = "SELECT points FROM $table WHERE $idtype = $customerid;
    SELECT feathers FROM the_nest WHERE nest_id = $nestid;
    SELECT feathers FROM $wallet WHERE $customer_idtype = $customerid AND merchant_id = $merchantid";

    if ($balanceResult = $conn->multi_query($balanceQuery)) {
        $i=0;
        do {
            if ($balanceResult = $conn->store_result()) {
                $temp['data'][$i] = $balanceResult->fetch_assoc();
                $balanceResult->free();
            };
            $i++;
        } while ($conn->next_result());

        $customerPoints = $temp['data'][0]['points'];
        $nestFeathers = $temp['data'][1]['feathers'];
        $customerFeathers = ($tempFeathers = $temp['data'][2]['feathers']) ? $tempFeathers : 0;

        $newCustomerPoints = $customerPoints - $points; //Deduct from customer points
        $newNestFeathers = $nestFeathers - $feathers; //Deduct from nest balance
        $newCustomerFeathers = $customerFeathers + $feathers; //Add to customer wallet

        //1.If no initial wallet balance, make new entry in feather recipient wallet, else, add to entry in wallet

        $transactionQuery = ($customerFeathers === 0) ? "INSERT INTO $wallet VALUES ('', $customerid, $merchantid, $newCustomerFeathers);" : "UPDATE $wallet SET feathers = $newCustomerFeathers WHERE $customer_idtype = $customerid AND merchant_id = $merchantid;";

        //2. Create new entry in Paypal transactions
        //3. Create new entry in transactions (receiving payment, associated store feathers, etc...)
        //4. Deduct feather recipient points
        //5. Deduct from nest

        $transtimestamp = date('Y-m-d H:i:s', strtotime($timestamp));

        $transactionQuery .= "
        INSERT INTO paypal_transactions ($idtype, price, points, feathers, paypal_id, timestamp) VALUES($customerid, $price, $points, $feathers, '$paypalid', '$timestamp');
        INSERT INTO transactions ($owner_idtype, feathers_merchant_id, points, feathers, pay_amount, pay_method,transaction_type,transaction_complete) VALUES($customerid,$merchantid,'$points','$feathers','$price','Card','Nest','$transtimestamp');
        UPDATE $table SET points = $newCustomerPoints WHERE $idtype = $customerid;
        UPDATE the_nest SET feathers = $newNestFeathers WHERE nest_id = $nestid";

        if ($transactionResult = $conn->multi_query($transactionQuery)) {
            do {
                if ($temp = $conn->store_result()) {
                    $temp->free();
                };
            } while ($conn->next_result());

            $result['status'] = 1;
            $result['message'] = 'Feathers transaction completed.';
        } else {
            $result['status'] = 0;
            $result['message'] = 'Unable to update tables.';
            $result['query'] = $transactionQuery;
        };
    } else {
        $result['status'] = 0;
        $result['message'] = 'Unable to select customer.';
    };

    echo json_encode($result);
};*/
?>